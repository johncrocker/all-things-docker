#!/bin/bash

function echoerr() {
	printf "%s\n" "$*" >&2
}

function echoinfo() {
	printf "%s\n" "$*" >&2
}

function loadenvfile() {
	envfile="$1"
	if [ -e "$envfile" ]; then
		echoinfo "Reading Enfironmemt file: $envfile"
		set -a
		source "$envfile"
		set +a
	fi
}

function dockercompose() {
	docker-compose -p $1 -f $2 $3 $4
}

function listcontainerips {
	echo ""
	printf "%-20s %s\n" "ADDRESS" "CONTAINER"

	for containerid in $(docker-compose -p $1 -f $2 ps -q); do
		ipaddress=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $containerid)
		containername=$(docker inspect -f "{{.Name}}" $containerid)


		if [ "$ipaddress" = "" ]; then
			ipaddress="0.0.0.0"
		fi

		printf "%-20s %s\n" $ipaddress $containername
	done
	echo ""
}

function restartcontainers {
	docker-compose -p $1 -f $2 stop
	docker-compose -p $1 -f $2 up -d
}

function debugcontainers {
	docker-compose -p $1 -f $2 up
}

function removecontainers {
	docker-compose -p $1 -f $2 stop
	docker-compose -p $1 -f $2 rm
}

function murdercontaimers {
	echo "CAUTION: This deletes everything relatd to this stack"
	echo "(Volumes, Contaimers, Images, Networks etc)"
	echo "Are you sure?"

	select yn in "Yes" "No"; do
		case $yn in
		Yes)
			docker-compose -p $1 -f $2 down -v --rmi all
			echo "Deleted"
			exit 0
			;;
		Nochx)
			echo "Aborting"
			echo ""
			exit 0
			;;
		esac
	done

	echo ""
}

function genrunbook()
echo "#!/bin/bash"
echo "docker-compose -p $1 -f $2 up -d"
}


if [ "$DOCKER_COMPOSE_FOLDER" = "" ]; then
	echoerr "CRITICAL: Environment varable DOCKER_COMPOSE_FOLDER must be set to the folder contaihing the Docker Compose files."
	exit 1
fi

if [ "$DOCKER_ENV" = "" ]; then
	echoerr "CRITICAL: Environment varable DOCKER_ENV must be set to the folder containing the environnent files  used. Please resolve."
	exit 1
fi

if [ "$DOCKER_SECRET_ENV" = "" ]; then
	echoerr "CRITICAL: Environment variable DOCKER_SECRET_ENV must be set to the folder containing the secret files used. Please resolve."
	exit 1
fi

export DOCKER_GATEWAY_HOST=$(ip addr show dev eth0 | grep 'state UP' -A2 | tail -n1 | awk -F'[/ ]+' '{print $3}')
export PUID="$UID"
export PGID="$UID"

project="$1"
composefile="$DOCKER_COMPOSE_FOLDER/docker-compose-$project.yml"
stackname="$project-stack"
cmd="$2"
params=""

if [ "$project" = "" ]; then
	echoerr "ERROR: Parameter <<stackname>> not specified"
	echoerr ""
	echoerr "Format: dcmd <<stackname>> <<command>>"
	exit 1
fi

if [ ! -z "$3" ]; then
	composefile="$DOCKER_COMPOSE_FOLDER/docker-compose-$2.yml"
	cmd="$3"
fi

if [ "$cmd" = "up" ]; then
	params="-d"
fi

echo ""
echoinfo "Stack·name:·$stackname"

if [ -e "$composefile" ]; then
	echoinfo "Using compose file: $composefile"

	loadenvfile "$DOCKER_ENV/global.env"
	loadenvfile "$DOCKER_ENV/$project.env"
	loadenvfile "$DOCKER_SECRET_ENV/$project.env"

	case $cmd in
	ip)
		listcontainerips $stackname $composefile
		;;
	restart)
		restartcontainers $stackname $composefile
		;;
	debug)
		debugcontainers $stackname $composefile
		;;
	rmw)
		removecontainers $stackname $composefile
		;;
	murder)
		murdercontainer $stackname $composefile
		;;
        runbook)
                genrunbook $stackname $composefile $project
                ;;
	*)
		dockercompose $stackname $composefile $cmd $params
		;;
	esac

else
	echoerr Cannot find compose file: $composefile
	echoerr Aborting
	exit 1
fi

echo ""
